{"version":3,"file":"main-327f43b0.js","sources":["../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/drafts.jsx","../../src/components/media-modal.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/accounts.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/utils/push-notifications.js","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/assets/logo.svg","../../src/pages/settings.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.update(list.id, {\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.remove(list.id);\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  return (\n    <div\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a href={account} target=\"_blank\">\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>████████ ███████</p>\n              <p>███████████████ ███████████████</p>\n            </div>\n            <p class=\"stats\">\n              <div>\n                <span>██</span> Followers\n              </div>\n              <div>\n                <span>██</span> Following\n              </div>\n              <div>\n                <span>██</span> Posts\n              </div>\n              <div>Joined ██</div>\n            </p>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d');\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <main tabIndex=\"-1\">\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              <div\n                class=\"note\"\n                onClick={handleContentLinks({\n                  instance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              {fields?.length > 0 && (\n                <div class=\"profile-metadata\">\n                  {fields.map(({ name, value, verifiedAt }, i) => (\n                    <div\n                      class={`profile-field ${\n                        verifiedAt ? 'profile-verified' : ''\n                      }`}\n                      key={name + i}\n                    >\n                      <b>\n                        <EmojiText text={name} emojis={emojis} />{' '}\n                        {!!verifiedAt && <Icon icon=\"check-circle\" size=\"s\" />}\n                      </b>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: enhanceContent(value, { emojis }),\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n              <p class=\"stats\">\n                <div>\n                  <span title={followersCount}>\n                    {shortenNumber(followersCount)}\n                  </span>{' '}\n                  Followers\n                </div>\n                <div class=\"insignificant\">\n                  <span title={followingCount}>\n                    {shortenNumber(followingCount)}\n                  </span>{' '}\n                  Following\n                  <br />\n                </div>\n                {standalone ? (\n                  <div class=\"insignificant\">\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </div>\n                ) : (\n                  <Link\n                    class=\"insignificant\"\n                    to={instance ? `/${instance}/a/${id}` : `/a/${id}`}\n                    onClick={() => {\n                      hideAllModals();\n                    }}\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </Link>\n                )}\n                {!!createdAt && (\n                  <div class=\"insignificant\">\n                    Joined{' '}\n                    <time datetime={createdAt}>\n                      {niceDateTime(createdAt, {\n                        hideTime: true,\n                      })}\n                    </time>\n                  </div>\n                )}\n              </p>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n              />\n            </main>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nfunction RelatedActions({ info, instance, authenticated }) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields } = info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        setRelationshipUIState('loading');\n        setFamiliarFollowers([]);\n\n        const fetchRelationships = currentMasto.v1.accounts.fetchRelationships([\n          currentID,\n        ]);\n        const fetchFamiliarFollowers =\n          currentMasto.v1.accounts.fetchFamiliarFollowers(currentID);\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n\n            if (!relationship.following) {\n              try {\n                const followers = await fetchFamiliarFollowers;\n                console.log('fetched familiar followers', followers);\n                setFamiliarFollowers(followers[0].accounts.slice(0, 10));\n              } catch (e) {\n                console.error(e);\n              }\n            }\n          }\n          setRelationshipUIState('default');\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n\n  return (\n    <>\n      <div\n        class=\"common-followers shazam-container no-animation\"\n        hidden={!familiarFollowers?.length}\n      >\n        <div class=\"shazam-container-inner\">\n          <p>\n            Followed by{' '}\n            <span class=\"ib\">\n              {familiarFollowers.map((follower) => (\n                <a\n                  href={follower.url}\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = {\n                      account: follower,\n                      instance,\n                    };\n                  }}\n                >\n                  <Avatar\n                    url={follower.avatarStatic}\n                    size=\"l\"\n                    alt={`${follower.displayName} @${follower.acct}`}\n                    squircle={follower?.bot}\n                  />\n                </a>\n              ))}\n            </span>\n          </p>\n        </div>\n      </div>\n      <p class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              {niceDateTime(lastStatusAt, {\n                hideTime: true,\n              })}\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.unmute(\n                              currentInfo?.id || id,\n                            );\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts.mute(\n                                    currentInfo?.id || id,\n                                    {\n                                      duration,\n                                    },\n                                  );\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.unblock(\n                              currentInfo?.id || id,\n                            );\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.block(\n                              currentInfo?.id || id,\n                            );\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts.unfollow(\n                        accountID.current,\n                      );\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts.follow(\n                        accountID.current,\n                      );\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </p>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowTranslatedBio(false);\n            }\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowAddRemoveLists(false);\n            }\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        const listsContainingAccount = await masto.v1.accounts.listLists(\n          accountID,\n        );\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists.removeAccount(list.id, {\n                              accountIds: [accountID],\n                            });\n                          } else {\n                            await masto.v1.lists.addAccount(list.id, {\n                              accountIds: [accountID],\n                            });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  const escRef = useHotkeys('esc', onClose, [onClose]);\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  return (\n    <div\n      ref={escRef}\n      class=\"sheet\"\n      onClick={(e) => {\n        const accountBlock = e.target.closest('.account-block');\n        if (accountBlock) {\n          onClose({\n            destination: 'account-statuses',\n          });\n        }\n      }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nexport default function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const notificationStream = useRef();\n  useEffect(() => {\n    if (isLoggedIn && visible) {\n      const { masto, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        if (states.notificationsLast) {\n          const notificationsIterator = masto.v1.notifications.list({\n            limit: 1,\n            since_id: states.notificationsLast.id,\n          });\n          const { value: notifications } = await notificationsIterator.next();\n          if (notifications?.length) {\n            states.notificationsShowNew = true;\n          }\n        }\n\n        // 2. Start streaming\n        notificationStream.current = await masto.ws.stream(\n          '/api/v1/streaming',\n          {\n            stream: 'user:notification',\n          },\n        );\n        console.log('🎏 Streaming notification', notificationStream.current);\n\n        notificationStream.current.on('notification', (notification) => {\n          console.log('🔔🔔 Notification', notification);\n          if (notification.status) {\n            saveStatus(notification.status, instance, {\n              skipThreading: true,\n            });\n          }\n          states.notificationsShowNew = true;\n        });\n\n        notificationStream.current.ws.onclose = () => {\n          console.log('🔔🔔 Notification stream closed');\n        };\n      })();\n    }\n    return () => {\n      if (notificationStream.current) {\n        notificationStream.current.ws.close();\n        notificationStream.current = null;\n      }\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  return null;\n}\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses.fetch(\n                              replyTo.id,\n                            );\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MenuLink from './menu-link';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys('esc', onClose, [onClose]);\n\n  const [showMediaAlt, setShowMediaAlt] = useState(false);\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div class=\"media-modal-container\">\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          const rgbAverageColor = blurhash\n            ? getBlurHashAverageColor(blurhash)\n            : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--average-color': `rgb(${rgbAverageColor?.join(',')})`,\n                '--average-color-alpha': `rgba(${rgbAverageColor?.join(\n                  ',',\n                )}, .5)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                if (e.target !== e.currentTarget) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    setShowMediaAlt(media.description);\n                  }}\n                >\n                  <Icon icon=\"info\" />\n                  <span class=\"media-alt-desc\">{media.description}</span>\n                </button>\n              )}\n              <Media media={media} showOriginal />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n      {!!showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowMediaAlt(false);\n              carouselRef.current.focus();\n            }\n          }}\n        >\n          <MediaAltModal\n            alt={showMediaAlt}\n            onClose={() => setShowMediaAlt(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction MediaAltModal({ alt, onClose }) {\n  const [forceTranslate, setForceTranslate] = useState(false);\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {alt}\n        </p>\n        {forceTranslate && (\n          <TranslationBlock forceTranslate={forceTranslate} text={alt} />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default MediaModal;\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests.authorize(accountID);\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests.reject(accountID);\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'favourited your post.',\n  'favourite+account': (count) => `favourited ${count} of your posts.`,\n  favourite_reply: 'favourited your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & favourited your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & favourited ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & favourited your reply.',\n};\n\nfunction Notification({ notification, instance, reload, isStatic }) {\n  const { id, status, account, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else {\n    text = contentText[type];\n  }\n  if (typeof text === 'function') {\n    text = text(_statuses?.length || _accounts?.length);\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  return (\n    <div class={`notification notification-${type}`} tabIndex=\"0\">\n      <div\n        class={`notification-type notification-${type}`}\n        title={new Date(notification.createdAt).toLocaleString()}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b>{_accounts.length} people</b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons\n                accountID={account.id}\n                onChange={() => {\n                  // reload();\n                }}\n              />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.map((account, i) => (\n              <>\n                <a\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 100\n                        ? 'xl'\n                        : _accounts.length < 1000\n                        ? 'l'\n                        : _accounts.length < 2000\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </>\n            ))}\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <Link\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <Link\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n          >\n            {isStatic ? (\n              <Status status={actualStatus} size=\"s\" />\n            ) : (\n              <Status statusID={actualStatusID} size=\"s\" />\n            )}\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Notification;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\nexport default function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.fetch(id);\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn(\n          '🛎️ Notification not found',\n          notificationID,\n          notificationAccessToken,\n        );\n      }\n    })();\n  }, [id, accessToken]);\n\n  useLayoutEffect(() => {\n    // Listen to message from service worker\n    const handleMessage = (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    };\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      console.log('👂👂👂 Remove listen to message');\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\">\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n}\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport mem from 'mem';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nconst SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Favourites',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: mem(\n      async ({ id }) => {\n        const list = await api().masto.v1.lists.fetch(id);\n        return list.title;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: mem(\n      async ({ id }) => {\n        const account = await api().masto.v1.accounts.fetch(id);\n        return account.username || account.acct || account.displayName;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Favourites',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>\n          Specify a list of shortcuts that'll appear&nbsp;as:\n          <div class=\"shortcuts-view-mode\">\n            {[\n              {\n                value: 'float-button',\n                label: 'Floating button',\n                imgURL: floatingButtonUrl,\n              },\n              {\n                value: 'tab-menu-bar',\n                label: 'Tab/Menu bar',\n                imgURL: tabMenuBarUrl,\n              },\n              {\n                value: 'multi-column',\n                label: 'Multi-column',\n                imgURL: multiColumnUrl,\n              },\n            ].map(({ value, label, imgURL }) => (\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={\n                    snapStates.settings.shortcutsViewMode === value ||\n                    (value === 'float-button' &&\n                      !snapStates.settings.shortcutsViewMode)\n                  }\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            ))}\n          </div>\n          {/* <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select> */}\n        </p>\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\">\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              const key = i + Object.values(shortcut);\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            lists={lists}\n            followedHashtags={followedHashtags}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction ShortcutForm({\n  lists,\n  followedHashtags,\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={i + title}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default Shortcuts;\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsColumnsMode ||\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Favourites</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts Settings&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useIdle } from '@uidotdev/usehooks';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Loader from './loader';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n  timelineStart,\n  allowFilters,\n  refresh,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (boostsCarousel) {\n              value = groupBoosts(value);\n            }\n            value = groupContext(value);\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const isHovering = useRef(false);\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableHoverCheck = false } = {}) => {\n      console.log('✨ Load or check updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableHoverCheck,\n        idle,\n        inBackground: inBackground(),\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop === 0 &&\n        (disableHoverCheck || idle) &&\n        !inBackground()\n      ) {\n        console.log('✨ Load updates', snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, idle, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n          loadOrCheckUpdates({\n            disableHoverCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n      onPointerEnter={(e) => {\n        isHovering.current = true;\n      }}\n      onPointerLeave={() => {\n        isHovering.current = false;\n      }}\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!timelineStart && <div class=\"timeline-start\">{timelineStart}</div>}\n        {!!items.length ? (\n          <>\n            <ul class=\"timeline\">\n              {items.map((status) => {\n                const { id: statusID, reblog, items, type, _pinned } = status;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                let title = '';\n                if (type === 'boosts') {\n                  title = `${items.length} Boosts`;\n                } else if (type === 'pinned') {\n                  title = 'Pinned posts';\n                }\n                const isCarousel = type === 'boosts' || type === 'pinned';\n                if (items) {\n                  if (isCarousel) {\n                    // Here, we don't hide filtered posts, but we sort them last\n                    items.sort((a, b) => {\n                      if (a._filtered && !b._filtered) {\n                        return 1;\n                      }\n                      if (!a._filtered && b._filtered) {\n                        return -1;\n                      }\n                      return 0;\n                    });\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class=\"timeline-item-carousel\"\n                      >\n                        <StatusCarousel\n                          title={title}\n                          class={`${type}-carousel`}\n                        >\n                          {items.map((item) => {\n                            const { id: statusID, reblog } = item;\n                            const actualStatusID = reblog?.id || statusID;\n                            const url = instance\n                              ? `/${instance}/s/${actualStatusID}`\n                              : `/s/${actualStatusID}`;\n                            return (\n                              <li key={statusID}>\n                                <Link\n                                  class=\"status-carousel-link timeline-item-alt\"\n                                  to={url}\n                                >\n                                  {useItemID ? (\n                                    <Status\n                                      statusID={statusID}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                    />\n                                  ) : (\n                                    <Status\n                                      status={item}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                    />\n                                  )}\n                                </Link>\n                              </li>\n                            );\n                          })}\n                        </StatusCarousel>\n                      </li>\n                    );\n                  }\n                  const manyItems = items.length > 3;\n                  return items.map((item, i) => {\n                    const { id: statusID, _differentAuthor } = item;\n                    const url = instance\n                      ? `/${instance}/s/${statusID}`\n                      : `/s/${statusID}`;\n                    const isMiddle = i > 0 && i < items.length - 1;\n                    const isSpoiler = item.sensitive && !!item.spoilerText;\n                    const showCompact =\n                      (isSpoiler && i > 0) ||\n                      (manyItems && isMiddle && type === 'thread');\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n                          i === 0\n                            ? 'start'\n                            : i === items.length - 1\n                            ? 'end'\n                            : 'middle'\n                        } ${\n                          _differentAuthor ? 'timeline-item-diff-author' : ''\n                        }`}\n                      >\n                        <Link class=\"status-link timeline-item\" to={url}>\n                          {showCompact ? (\n                            <TimelineStatusCompact\n                              status={item}\n                              instance={instance}\n                            />\n                          ) : useItemID ? (\n                            <Status\n                              statusID={statusID}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          ) : (\n                            <Status\n                              status={item}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          )}\n                        </Link>\n                      </li>\n                    );\n                  });\n                }\n                return (\n                  <li key={`timeline-${statusID + _pinned}`}>\n                    <Link class=\"status-link timeline-item\" to={url}>\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={status}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n              {showMore && uiState === 'loading' && (\n                <>\n                  <li\n                    style={{\n                      height: '20vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                  <li\n                    style={{\n                      height: '25vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                </>\n              )}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <li key={i}>\n                <Status skeleton />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article class=\"status compact-thread\" tabindex=\"-1\">\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n  async function fetchAccountStatuses(firstLoad) {\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .listStatuses(id, {\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length && !tagged && !media) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n          saveStatus(status, instance);\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts.listStatuses(id, {\n        limit: LIMIT,\n        exclude_replies: excludeReplies,\n        exclude_reblogs: excludeBoosts,\n        only_media: media,\n        tagged,\n      });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [account, setAccount] = useState();\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    `${account?.displayName ? account.displayName + ' ' : ''}@${\n      account?.acct ? account.acct : 'Account posts'\n    }`,\n    '/:instance?/a/:id',\n  );\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.fetch(id);\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts.listFeaturedTags(id);\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    const filtered = !excludeReplies || excludeBoosts || tagged || media;\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={() => masto.v1.accounts.fetch(id)}\n          authenticated={authenticated}\n          standalone\n        />\n        <div class=\"filter-bar\" ref={filterBarRef}>\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    excludeReplies,\n    excludeBoosts,\n    featuredTags,\n    tagged,\n    media,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, tagged, media, excludeReplies, excludeBoosts]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={excludeReplies + excludeBoosts + tagged + media}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default AccountStatuses;\n","import './accounts.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer, useState } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n  const [currentDefault, setCurrentDefault] = useState(0);\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\">\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === (currentDefault || 0);\n              return (\n                <li key={i + account.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts.fetch(\n                              account.info.id,\n                            );\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            setCurrentDefault(i);\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Favourites', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Favourites\"\n      id=\"favourites\"\n      emptyText=\"No favourites yet. Go favourite something!\"\n      errorText=\"Unable to load favourites\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import store from './store';\n\nexport function filteredItem(item, filterContext, currentAccountID) {\n  const { filtered } = item;\n  if (!filtered?.length) return true;\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\n  if (isSelf) return true;\n  const appliedFilters = filtered.filter((f) => {\n    const { filter } = f;\n    const hasContext = filter.context.includes(filterContext);\n    if (!hasContext) return false;\n    if (!filter.expiresAt) return hasContext;\n    return new Date(filter.expiresAt) > new Date();\n  });\n  if (!appliedFilters.length) return true;\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\n  console.log({ isHidden, filtered, appliedFilters, item });\n  if (isHidden) return false;\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\n  if (isWarn) {\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\n    item._filtered = {\n      titles: filterTitles,\n      titlesStr: filterTitles.join(' • '),\n    };\n  }\n  return isWarn;\n}\nexport function filteredItems(items, filterContext) {\n  if (!items?.length) return [];\n  if (!filterContext) return items;\n  const currentAccountID = store.session.get('currentAccount');\n  return items.filter((item) =>\n    filteredItem(item, filterContext, currentAccountID),\n  );\n}\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.listHome({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHome({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const ws = useRef();\n  const streamUser = async () => {\n    console.log('🎏 Start streaming user', ws.current);\n    if (\n      ws.current &&\n      (ws.current.readyState === WebSocket.CONNECTING ||\n        ws.current.readyState === WebSocket.OPEN)\n    ) {\n      console.log('🎏 Streaming user already open');\n      return;\n    }\n    const stream = await masto.v1.stream.streamUser();\n    ws.current = stream.ws;\n    ws.current.__id = Math.random();\n    console.log('🎏 Streaming user', ws.current);\n\n    stream.on('status.update', (status) => {\n      console.log(`🔄 Status ${status.id} updated`);\n      saveStatus(status, instance);\n    });\n\n    stream.on('delete', (statusID) => {\n      console.log(`❌ Status ${statusID} deleted`);\n      // delete states.statuses[statusID];\n      const s = getStatus(statusID, instance);\n      if (s) s._deleted = true;\n    });\n\n    stream.ws.onclose = () => {\n      console.log('🎏 Streaming user closed');\n    };\n\n    return stream;\n  };\n  useEffect(() => {\n    let stream;\n    (async () => {\n      stream = await streamUser();\n    })();\n    return () => {\n      if (stream) {\n        stream.ws.close();\n        ws.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      allowFilters\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  Menu,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { authenticated: currentAuthenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.listHashtag(hashtag, {\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines\n      .listHashtag(hashtag, {\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n      })\n      .next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHashtag(hashtag, {\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.fetch(hashtag);\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-account\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .unfollow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .follow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  navigate(\n                    instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`,\n                  );\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.listList(id, {\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.listList(id, {\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.fetch(id);\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        allowFilters\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists.listAccounts(listID, {\n            limit: MEMBERS_LIMIT,\n          });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.addAccount(listID, {\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.removeAccount(listID, {\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  useTitle('Mentions', '/mentions');\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","function groupNotifications(notifications) {\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { status, account, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { account, _accounts, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.webPushSubscriptions.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.webPushSubscriptions.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.webPushSubscriptions.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.webPushSubscriptions.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './notifications.css';\n\nimport { useIdle } from '@uidotdev/usehooks';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    return masto.v1.followRequests.list({\n      limit: 80,\n    });\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  function fetchAnnouncements() {\n    return masto.v1.announcements.list();\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n        const fetchFollowRequestsPromise = fetchFollowRequests();\n        const fetchAnnouncementsPromise = fetchAnnouncements();\n\n        if (firstLoad) {\n          const announcements = await fetchAnnouncementsPromise;\n          announcements.sort((a, b) => {\n            // Sort by updatedAt first, then createdAt\n            const aDate = new Date(a.updatedAt || a.createdAt);\n            const bDate = new Date(b.updatedAt || b.createdAt);\n            return bDate - aDate;\n          });\n          setAnnouncements(announcements);\n          const requests = await fetchFollowRequestsPromise;\n          setFollowRequests(requests);\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd && showMore) {\n      loadNotifications();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const isHovering = useRef(false);\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadUpdates = useCallback(() => {\n    console.log('✨ Load updates', {\n      autoRefresh: snapStates.settings.autoRefresh,\n      scrollTop: scrollableRef.current?.scrollTop === 0,\n      isHovering: isHovering.current,\n      inBackground: inBackground(),\n      notificationsShowNew: snapStates.notificationsShowNew,\n      uiState,\n    });\n    if (\n      snapStates.settings.autoRefresh &&\n      scrollableRef.current?.scrollTop === 0 &&\n      (!isHovering.current || idle) &&\n      !inBackground() &&\n      snapStates.notificationsShowNew &&\n      uiState !== 'loading'\n    ) {\n      loadNotifications(true);\n    }\n  }, [\n    idle,\n    snapStates.notificationsShowNew,\n    snapStates.settings.autoRefresh,\n    uiState,\n  ]);\n  useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  useEffect(() => {\n    if (uiState === 'default') {\n      (async () => {\n        const registration = await getRegistration();\n        if (registration) {\n          const notifications = await registration.getNotifications();\n          console.log('🔔 Push notifications', notifications);\n          // Close all notifications?\n          // notifications.forEach((notification) => {\n          //   notification.close();\n          // });\n        }\n      })();\n    }\n  }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n      onPointerEnter={() => {\n        console.log('👆 Pointer enter');\n        isHovering.current = true;\n      }}\n      onPointerLeave={() => {\n        console.log('👇 Pointer leave');\n        isHovering.current = false;\n      }}\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications.map((notification) => {\n              if (onlyMentions && notification.type !== 'mention') {\n                return null;\n              }\n              const notificationDay = new Date(notification.createdAt);\n              const differentDay =\n                notificationDay.toDateString() !== currentDay.toDateString();\n              if (differentDay) {\n                currentDay = notificationDay;\n              }\n              // if notificationDay is yesterday, show \"Yesterday\"\n              // if notificationDay is before yesterday, show date\n              const heading =\n                notificationDay.toDateString() === yesterdayDate.toDateString()\n                  ? 'Yesterday'\n                  : niceDateTime(currentDay, {\n                      hideTime: true,\n                    });\n              return (\n                <>\n                  {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                  <Notification\n                    instance={instance}\n                    notification={notification}\n                    key={notification.id}\n                    reload={() => {\n                      loadNotifications(true);\n                      loadFollowRequests();\n                    }}\n                  />\n                </>\n              );\n            })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <button\n            type=\"button\"\n            class=\"plain block\"\n            disabled={uiState === 'loading'}\n            onClick={() => loadNotifications()}\n            style={{ marginBlockEnd: '6em' }}\n          >\n            {uiState === 'loading' ? <Loader abrupt /> : <>Show more&hellip;</>}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.listPublic({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listPublic({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.listStatuses({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.listTags();\n        const { value: tags } = await iterator.next();\n        console.log(tags);\n        setHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends\n        .listStatuses({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    if (!hashtags.length) return null;\n    return (\n      <div class=\"filter-bar\">\n        <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n        {hashtags.map((tag, i) => {\n          const { name, history } = tag;\n          const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n          return (\n            <Link to={`/${instance}/t/${name}`}>\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {name}\n              </span>\n              <span class=\"filter-count\">{total.toLocaleString()}</span>\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }, [hashtags]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport openCompose from '../utils/open-compose';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n      {/* <button\n        // hidden={scrollDirection === 'end' && !nearReachStart}\n        type=\"button\"\n        id=\"compose-button\"\n        onClick={(e) => {\n          if (e.shiftKey) {\n            const newWin = openCompose();\n            if (!newWin) {\n              alert('Looks like your browser is blocking popups.');\n              states.showCompose = true;\n            }\n          } else {\n            states.showCompose = true;\n          }\n        }}\n      >\n        <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n      </button> */}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { forwardRef } from 'preact/compat';\nimport {\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        params.offset = offsetRef.current;\n      }\n      try {\n        const results = await masto.v2.search(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    // searchFieldRef.current?.focus?.();\n    // searchFormRef.current?.focus?.();\n    if (q) {\n      // searchFieldRef.current.value = q;\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    }\n  }, [q, type, instance]);\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div class=\"filter-bar\">\n              {!!type && <Link to={`/search${q ? `?q=${q}` : ''}`}>‹ All</Link>}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${q}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${q}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${q}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to}>{link.label}</Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => (\n                          <li key={hashtag.name}>\n                            <Link\n                              to={\n                                instance\n                                  ? `/${instance}/t/${hashtag.name}`\n                                  : `/t/${hashtag.name}`\n                              }\n                            >\n                              <Icon icon=\"hashtag\" />\n                              <span>{hashtag.name}</span>\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        if (query) {\n          const params = {\n            q: query,\n          };\n          if (type) params.type = type; // Preserve type\n          setSearchParams(params);\n        } else {\n          setSearchParams({});\n        }\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link to={to} class=\"search-popover-item\" hidden={hidden}>\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n","export default \"__VITE_ASSET__c2b3a5f0__\"","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        <h3>Posting</h3>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label for=\"posting-privacy-field\">Default visibility</label>\n              </div>\n              <div>\n                <select\n                  id=\"posting-privacy-field\"\n                  value={prefs['posting:default:visibility'] || 'public'}\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    const { masto } = api();\n                    (async () => {\n                      try {\n                        await masto.v1.accounts.updateCredentials({\n                          source: {\n                            privacy: value,\n                          },\n                        });\n                        setPrefs({\n                          ...prefs,\n                          'posting:default:visibility': value,\n                        });\n                        store.account.set('preferences', {\n                          ...prefs,\n                          'posting:default:visibility': value,\n                        });\n                      } catch (e) {\n                        alert('Failed to update posting privacy');\n                        console.error(e);\n                      }\n                    })();\n                  }}\n                >\n                  <option value=\"public\">Public</option>\n                  <option value=\"unlisted\">Unlisted</option>\n                  <option value=\"private\">Followers only</option>\n                </select>\n              </div>\n            </li>\n          </ul>\n        </section>\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                class=\"light\"\n                onClick={() => {\n                  states.showDrafts = true;\n                  states.showSettings = false;\n                }}\n              >\n                Unsent drafts\n              </button>\n            </li>\n          </ul>\n        </section>\n        <PushNotificationsSection onClose={onClose} />\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              <span class=\"insignificant\">Last build:</span>{' '}\n              <RelativeTime datetime={new Date(__BUILD_TIME__)} />{' '}\n              {__COMMIT_HASH__ && (\n                <>\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                  >\n                    <code>{__COMMIT_HASH__}</code>\n                  </a>\n                  )\n                </>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNofitications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNofitications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', { values, allowNofitications, params });\n\n        if (allowNofitications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNofitications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNofitications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNofitications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Favourites',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only works for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useParams, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete states.scrollPositions[id];\n}\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.fetch(id);\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            index={mediaIndex - 1}\n            onClose={() => {\n              if (\n                !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n                snapStates.prevLocation\n              ) {\n                history.back();\n              } else {\n                if (showMediaOnly) {\n                  location.hash = closeLink;\n                } else {\n                  searchParams.delete('media');\n                  searchParams.delete('mediaStatusID');\n                  setSearchParams(searchParams);\n                }\n              }\n            }}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const [viewMode, setViewMode] = useState(searchParams.get('view'));\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        states.scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.fetch(id), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(() => masto.v1.statuses.fetchContext(id), {\n        retries: 8,\n      });\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = snapStates.scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      states.scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      // Select all statuses except those inside collapsed details/summary\n      // Hat-tip to @AmeliaBR@front-end.social\n      // https://front-end.social/@AmeliaBR/109784776146144471\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${initialPageState.current === 'status' ? 'slide-in' : ''} ${\n        viewMode ? `deck-view-${viewMode}` : ''\n      }`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {!!/\\/s\\//i.test(snapStates.prevLocation?.pathname) && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map((status) => {\n            const {\n              id: statusID,\n              ancestor,\n              isThread,\n              descendant,\n              thread,\n              replies,\n              repliesCount,\n              weight,\n            } = status;\n            const isHero = statusID === id;\n            // const StatusParent = useCallback(\n            //   (props) =>\n            //     isThread || thread || ancestor ? (\n            //       <Link\n            //         class=\"status-link\"\n            //         to={\n            //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n            //         }\n            //         onClick={() => {\n            //           resetScrollPosition(statusID);\n            //         }}\n            //         {...props}\n            //       />\n            //     ) : (\n            //       <div class=\"status-focus\" tabIndex={0} {...props} />\n            //     ),\n            //   [isThread, thread],\n            // );\n            return (\n              <li\n                key={statusID}\n                ref={isHero ? heroStatusRef : null}\n                class={`${ancestor ? 'ancestor' : ''} ${\n                  descendant ? 'descendant' : ''\n                } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n              >\n                {isHero ? (\n                  <>\n                    <InView\n                      threshold={0.1}\n                      onChange={onView}\n                      class=\"status-focus\"\n                      tabIndex={0}\n                    >\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        withinContext\n                        size=\"l\"\n                        enableTranslate\n                        forceTranslate={translate}\n                      />\n                    </InView>\n                    {uiState !== 'loading' && !authenticated ? (\n                      <div class=\"post-status-banner\">\n                        <p>\n                          You're not logged in. Interactions (reply, boost, etc)\n                          are not possible.\n                        </p>\n                        <Link to=\"/login\" class=\"button\">\n                          Log in\n                        </Link>\n                      </div>\n                    ) : (\n                      !sameInstance && (\n                        <div class=\"post-status-banner\">\n                          <p>\n                            This post is from another instance (\n                            <b>{instance}</b>). Interactions (reply, boost, etc)\n                            are not possible.\n                          </p>\n                          <button\n                            type=\"button\"\n                            disabled={uiState === 'loading'}\n                            onClick={() => {\n                              setUIState('loading');\n                              (async () => {\n                                try {\n                                  const results = await currentMasto.v2.search({\n                                    q: heroStatus.url,\n                                    type: 'statuses',\n                                    resolve: true,\n                                    limit: 1,\n                                  });\n                                  if (results.statuses.length) {\n                                    const status = results.statuses[0];\n                                    location.hash = currentInstance\n                                      ? `/${currentInstance}/s/${status.id}`\n                                      : `/s/${status.id}`;\n                                  } else {\n                                    throw new Error('No results');\n                                  }\n                                } catch (e) {\n                                  setUIState('default');\n                                  alert('Error: ' + e);\n                                  console.error(e);\n                                }\n                              })();\n                            }}\n                          >\n                            <Icon icon=\"transfer\" /> Switch to my instance to\n                            enable interactions\n                          </button>\n                        </div>\n                      )\n                    )}\n                  </>\n                ) : (\n                  // <StatusParent>\n                  <Link\n                    class=\"status-link\"\n                    to={\n                      instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n                    }\n                    onClick={() => {\n                      resetScrollPosition(statusID);\n                    }}\n                  >\n                    <Status\n                      statusID={statusID}\n                      instance={instance}\n                      withinContext\n                      size={thread || ancestor ? 'm' : 's'}\n                      enableTranslate\n                      onMediaClick={handleMediaClick}\n                      onStatusLinkClick={() => {\n                        resetScrollPosition(statusID);\n                      }}\n                    />\n                    {ancestor && isThread && repliesCount > 1 && (\n                      <div class=\"replies-link\">\n                        <Icon icon=\"comment\" />{' '}\n                        <span title={repliesCount}>\n                          {shortenNumber(repliesCount)}\n                        </span>\n                      </div>\n                    )}{' '}\n                    {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n                    {/* </StatusParent> */}\n                  </Link>\n                )}\n                {descendant && replies?.length > 0 && (\n                  <SubComments\n                    instance={instance}\n                    replies={replies}\n                    hasParentThread={thread}\n                    level={1}\n                    accWeight={weight}\n                    openAll={\n                      totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT\n                    }\n                  />\n                )}\n                {uiState === 'loading' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-loading\">\n                      <Loader />\n                    </div>\n                  )}\n                {uiState === 'error' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-error\">\n                      Unable to load replies.\n                      <br />\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          states.reloadStatusPage++;\n                        }}\n                      >\n                        Try again\n                      </button>\n                    </div>\n                  )}\n              </li>\n            );\n          })}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport {\n  matchPath,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport 'swiped-events';\nimport { useSnapshot } from 'valtio';\n\nimport AccountSheet from './components/account-sheet';\nimport BackgroundService from './components/background-service';\nimport Compose from './components/compose';\nimport Drafts from './components/drafts';\nimport Icon, { ICONS } from './components/icon';\nimport Loader from './components/loader';\nimport MediaModal from './components/media-modal';\nimport Modal from './components/modal';\nimport NotificationService from './components/notification-service';\nimport Shortcuts from './components/shortcuts';\nimport ShortcutsSettings from './components/shortcuts-settings';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Accounts from './pages/accounts';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport Settings from './pages/settings';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport openCompose from './utils/open-compose';\nimport showToast from './utils/show-toast';\nimport states, { initStates } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\nfunction App() {\n  const snapStates = useSnapshot(states);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n  const navigate = useNavigate();\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState({}, document.title, location.pathname || '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const masto = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(masto, instanceURL),\n          initAccount(masto, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(masto);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { masto, instance } = api({ account });\n        console.log('masto', masto);\n        initPreferences(masto);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(masto, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n\n  const focusDeck = () => {\n    let timer = setTimeout(() => {\n      const columns = document.getElementById('columns');\n      if (columns) {\n        // Focus first column\n        // columns.querySelector('.deck-container')?.focus?.();\n      } else {\n        const backDrop = document.querySelector('.deck-backdrop');\n        if (backDrop) return;\n        // Focus last deck\n        const pages = document.querySelectorAll('.deck-container');\n        const page = pages[pages.length - 1]; // last one\n        if (page && page.tabIndex === -1) {\n          console.log('FOCUS', page);\n          page.focus();\n        }\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  };\n  useEffect(focusDeck, [location]);\n  const showModal =\n    snapStates.showCompose ||\n    snapStates.showSettings ||\n    snapStates.showAccounts ||\n    snapStates.showAccount ||\n    snapStates.showDrafts ||\n    snapStates.showMediaModal ||\n    snapStates.showShortcutsSettings;\n  useEffect(() => {\n    if (!showModal) focusDeck();\n  }, [showModal]);\n\n  const { prevLocation } = snapStates;\n  const backgroundLocation = useRef(prevLocation || null);\n  const isModalPage =\n    matchPath('/:instance/s/:id', location.pathname) ||\n    matchPath('/s/:id', location.pathname);\n  if (isModalPage) {\n    if (!backgroundLocation.current) backgroundLocation.current = prevLocation;\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  // Change #app dataset based on snapStates.settings.shortcutsViewMode\n  useEffect(() => {\n    const $app = document.getElementById('app');\n    if ($app) {\n      $app.dataset.shortcutsViewMode = snapStates.settings.shortcutsViewMode;\n    }\n  }, [snapStates.settings.shortcutsViewMode]);\n\n  // Add/Remove cloak class to body\n  useEffect(() => {\n    const $body = document.body;\n    $body.classList.toggle('cloak', snapStates.settings.cloakMode);\n  }, [snapStates.settings.cloakMode]);\n\n  return (\n    <>\n      <Routes location={nonRootLocation || location}>\n        <Route\n          path=\"/\"\n          element={\n            isLoggedIn ? (\n              <Home />\n            ) : uiState === 'loading' ? (\n              <Loader id=\"loader-root\" />\n            ) : (\n              location.pathname === \"/\" && <Public local instance=\"stargate.pbcarrara.com.br\" />\n            )\n          }\n        />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/welcome\" element={<Welcome />} />\n      </Routes>\n      <Routes location={backgroundLocation.current || location}>\n        {isLoggedIn && (\n          <Route path=\"/notifications\" element={<Notifications />} />\n        )}\n        {isLoggedIn && <Route path=\"/mentions\" element={<Mentions />} />}\n        {isLoggedIn && <Route path=\"/following\" element={<Following />} />}\n        {isLoggedIn && <Route path=\"/b\" element={<Bookmarks />} />}\n        {isLoggedIn && <Route path=\"/f\" element={<Favourites />} />}\n        {isLoggedIn && (\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n        )}\n        {isLoggedIn && <Route path=\"/ft\" element={<FollowedHashtags />} />}\n        <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n        <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n        <Route path=\"/:instance?/p\">\n          <Route index element={<Public />} />\n          <Route path=\"l\" element={<Public local />} />\n        </Route>\n        <Route path=\"/:instance?/trending\" element={<Trending />} />\n        <Route path=\"/:instance?/search\" element={<Search />} />\n        {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n      </Routes>\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && (\n        <button\n          type=\"button\"\n          id=\"compose-button\"\n          onClick={(e) => {\n            if (e.shiftKey) {\n              const newWin = openCompose();\n              if (!newWin) {\n                alert('Looks like your browser is blocking popups.');\n                states.showCompose = true;\n              }\n            } else {\n              states.showCompose = true;\n            }\n          }}\n        >\n          <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n        </button>\n      )}\n      {isLoggedIn &&\n        !snapStates.settings.shortcutsColumnsMode &&\n        snapStates.settings.shortcutsViewMode !== 'multi-column' && (\n          <Shortcuts />\n        )}\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: 'Post published. Check it out.',\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showSettings = false;\n            }\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showAccounts = false;\n            }\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showAccount = false;\n            }\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              if (destination) {\n                states.showAccounts = false;\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showDrafts = false;\n            }\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showShortcutsSettings = false;\n            }\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      <NotificationService />\n      <BackgroundService isLoggedIn={isLoggedIn} />\n    </>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["ListAddEdit","list","onClose","masto","api","uiState","setUIState","useState","editMode","nameFieldRef","useRef","repliesPolicyFieldRef","exclusiveFieldRef","useEffect","current","value","title","repliesPolicy","checked","exclusive","supportsExclusive","supports","_jsxs","class","children","_jsx","type","onClick","Icon","icon","onSubmit","e","preventDefault","formData","FormData","target","get","console","listResult","replies_policy","ref","MenuConfirm","disabled","alert","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","AccountInfo","account","fetchAccount","standalone","instance","authenticated","isString","info","setInfo","states","accounts","id","error","acct","avatar","avatarStatic","bot","createdAt","displayName","emojis","fields","followersCount","followingCount","group","lastStatusAt","locked","note","statusesCount","url","username","memorial","headerIsAvatar","header","headerStatic","test","headerCornerColors","setHeaderCornerColors","href","_Fragment","AccountBlock","avatarSize","src","alt","removeAttribute","crossOrigin","canvas","createElement","ctx","getContext","width","height","rgbColors","pixelDimension","data","colors","r","g","b","i","dataLength","length","a","color","map","lightenRGB","internal","enhanceContent","__html","name","verifiedAt","text","dangerouslySetInnerHTML","shortenNumber","Link","hideAllModals","to","niceDateTime","RelatedActions","currentInstance","sameInstance","currentMasto","currentAuthenticated","accountID","blocking","following","showingReblogs","notifying","followedBy","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","relationship","store","currentInfo","currentID","q","results","limit","log","setIsSelf","setRelationshipUIState","setFamiliarFollowers","fetchRelationships","relationships","followers","setRelationship","updateAccount","isSelf","menuInstanceRef","setShowTranslatedBio","familiarFollowers","follower","showTranslatedBio","showAddRemoveLists","Avatar","Menu","_b","_a","containerProps","overflow","MenuItem","menuButton","loading","size","MenuDivider","setShowAddRemoveLists","niceAccountURL","showToast","navigator","clipboard","share","newRelationship","SubMenu","label","duration","confirmLabel","relationshipUIState","Loader","menuItemClassName","v1","Modal","AddRemoveListsSheet","luminence","alpha","host","pathname","urlObj","path","Math","fieldsText","getHTMLText","TranslationBlock","lists","setLists","listsContainingAccount","setListsContainingAccount","reload","useReducer","c","forceTranslate","lists2","l","inList","showListAddEditModal","some","removeAccount","accountIds","setShowListAddEditModal","result","AccountSheet","propInstance","escRef","useHotkeys","closest","destination","lookup","skip_webfinger","v2","search","resolve","usePageVisibility","fn","deps","savedCallback","handleVisibilityChange","hidden","document","visibilityState","BackgroundService","isLoggedIn","visible","setVisible","notificationStream","notificationsLast","notificationsIterator","notifications","since_id","next","notificationsShowNew","ws","stream","notification","saveStatus","checkForUpdates","lastCheckDate","useInterval","json","then","catch","Drafts","drafts","setDrafts","reloadCount","keys","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","sort","Date","updatedAt","getTime","hasDrafts","abrupt","draft","draftStatus","replyTo","updatedAtDate","align","replyToStatus","window","MiniDraft","poll","status","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","style","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","focus","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","showMediaAlt","setShowMediaAlt","handleScroll","round","passive","timer","setTimeout","clearTimeout","tabIndex","classList","contains","blurhash","rgbAverageColor","getBlurHashAverageColor","join","tabindex","currentTarget","description","Media","showOriginal","stopPropagation","position","boundingBoxPadding","gap","menuClassName","MenuLink","remoteUrl","matchMedia","matches","MediaAltModal","setForceTranslate","whiteSpace","FollowRequestButtons","onChange","requestState","setRequestState","hasRelationship","rel","followRequests","authorize","Error","NOTIFICATION_ICONS","mention","reblog","follow","follow_request","favourite","update","contentText","count","reblog_reply","favourite_reply","Notification","isStatic","_accounts","_statuses","actualStatus","actualStatusID","currentAccount","session","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","_types","includes","toLocaleString","NameText","showAvatar","RelativeTime","datetime","format","showAccount","squircle","Status","NotificationService","snapStates","useSnapshot","routeNotification","accessToken","setShowNotificationSheet","showNotificationSheet","getAccountByAccessToken","getCurrentAccount","accountInstance","isFollow","notificationAccount","hasAccount","hasStatus","hasModal","location","event","id2","hash","warn","accessToken2","handleMessage","serviceWorker","clearAppBadge","tagName","instanceURL","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","_","mem","fetch","cacheKey","local","subtitle","query","split","ShortcutsSettings","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","iterator","tags","done","push","imgURL","multiColumnUrl","settings","shortcut","values","shortcutsArr","Array","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","forEach","setCurrentType","mode","required","defaultValue","undefined","tag","spellcheck","shortcutsStr","useMemo","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","isArray","err","hasCurrentSettings","setImportShortcutStr","s","opacity","Object","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","Shortcuts","menuRef","formattedShortcuts","pin","Boolean","navigate","useNavigate","handler","parseInt","closeMenu","shortcutsViewMode","page","getElementById","updatesButton","instanceRef","viewScroll","Menu2","props","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","groupContext","contexts","contextIndex","t","repliedItem","j","self","splice","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","min","init","dispatchEvent","Event","NavMenu","setCurrentAccount","moreThanOneAccount","setMoreThanOneAccount","getJSON","acc","find","showFollowing","shortcutsColumnsMode","bindLongPress","useLongPress","showAccounts","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","open","state","onContextMenu","ControlledMenu","anchorRef","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","showShortcutsSettings","showSettings","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","allowFilters","refresh","setItems","showMore","setShowMore","showNew","setShowNew","debug","firstLoad","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","getBoundingClientRect","allItems","from","querySelectorAll","activeItemIndex","indexOf","nextItem","itemRect","topmostItem","top","kRef","prevItem","findLast","oRef","isHovering","idle","useIdle","useCallback","disableHoverCheck","inBackground","loadOrCheckUpdates","autoRefresh","visible2","timeDiff","hasUpdate","lastHiddenTime","node","hiddenUI","_pinned","isCarousel","StatusCarousel","title2","_filtered","statusID2","reblog2","actualStatusID2","url2","contentTextWeight","isMiddle","showCompact","manyItems","_differentAuthor","TimelineStatusCompact","InView","inView","className","statusPeek","sKey","statusPeekText","statusThreadNumber","LIMIT","AccountStatuses","params","useParams","searchParams","setSearchParams","useSearchParams","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","fetchAccountStatuses","pinnedStatuses","listStatuses","pinned","pinnedStatusesIds","exclude_replies","exclude_reblogs","only_media","setAccount","featuredTags","setFeaturedTags","useTitle","featuredTags2","filterBarRef","TimelineStart","cachedAccount","filtered","active","querySelector","allowSwitch","domain","masto2","Accounts","currentDefault","setCurrentDefault","x","isCurrent","isDefault","onDblClick","showAcct","set","subMenu","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","streamUser","on","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","columnMode","hashtags","trim","hashtagTitle","maxID","fetchHashtags","timelines","listHashtag","any","maxId","followUIState","setFollowUIState","reachLimit","setDownOverflow","unfollow","finally","FocusableItem","newHashtag","autocorrect","MenuGroup","newInstance","List","listIterator","fetchList","listList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","groupNotifications","notificationsMap","cleanNotifications","date","toLocaleDateString","virtualType","mappedNotification","mappedAccount","reverse","n","notificationsMap2","cleanNotifications2","createBackendPushSubscription","subscription","webPushSubscriptions","create","fetchBackendPushSubscription","updateBackendPushSubscription","removeBackendPushSubscription","remove","isPushSupported","getRegistration","getSubscription","registration","pushManager","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","message","sameEndpoint","vapidKey","sameKey","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","policy","removeSubscription","userVisibleOnly","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","todayDate","announcementsListRef","currentDay","announcement","AnnouncementBlock","showTodayEmpty","notificationDay","differentDay","yesterdayDate","heading","contact","getCurrentInstance","contactAccount","content","startsAt","published","allDay","read","endsAt","publishedAt","statuses","reactions","publishedAtDate","publishedDateText","updatedAtText","reaction","me","staticUrl","memo","Public","isLocal","publicIterator","fetchPublic","listPublic","prompt","toLowerCase","Trending","setHashtags","trendIterator","fetchTrend","trends","listTags","history","total","reduce","Columns","components","Hashtag","Component","Home","showDrafts","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","skipThreading","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","hostname","URL","match","noteId","HttpRoute","useLocation","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","SCOPES","registerApplication","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","code","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","vapid_key","elements","instance2","instancesSuggestions","bStartsWith","aStartsWith","textAlign","autocapitalize","autocomplete","SHORT_LIMIT","Search","searchFormRef","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","offset","prev","SearchForm","link","forwardRef","searchMenuOpen","setSearchMenuOpen","searchFieldRef","useImperativeHandle","setQuery","focusItem","nextElementSibling","el","siblings","parentElement","firstItem","previousElementSibling","lastItem","logo","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","onInput","theme","html","toggle","defaultChecked","fontSize","max","step","documentElement","setProperty","for","source","contentTranslation","targetLanguages","lang","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","PushNotificationsSection","display","lineHeight","aspectRatio","verticalAlign","borderRadius","__BUILD_TIME__","pushFormRef","setAllowNotifications","previousPolicyRef","allowNofitications","needRelogin","alerts","policyEl","isLoading","alertsCount","allowNofitications2","policyChanged","permission","alert2","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","resetScrollPosition","scrollPositions","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","prevLocation","matchStatusPath","matchPath","delete","StatusThread","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","heroStatus2","_replies","_r","expandReplies","repliesCount","weight","replies","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","add","nestedDescendants","parent","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","reloadStatusPage","hasDescendants","innerHTML","heroInView","activeStatusRect","activeStatus","allStatusLinks","activeStatusIndex","nextStatus","onView","setHeroInView","statusLink","heroPointer","topmostStatusLink","enabled","prevStatus","details","statusLinkRect","initialPageState","handleMediaClick","viewMode","short","arr","button","MenuHeader","postSameInstance","buttons","descendant","thread","isHero","status2","SubComments","onStatusLinkClick","hasParentThread","openAll","level","diveDeep","replies2","reply","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","card","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","marginBlockEnd","nativeAlert","__nativeAlert","toast","Toastify","gravity","y","__STATES__","ICONS","App","setIsLoggedIn","setAttribute","textSize","decodeURIComponent","clientSecret","access_token","initPreferences","allSettled","initInstance","focusDeck","columns","pages","backDrop","showModal","backgroundLocation","isModalPage","$app","nonRootLocation","Routes","Route","$body","element","openCompose","newWin","Compose","_c","_e","newStatus","hideToast","_f","showMediaModal","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"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"}